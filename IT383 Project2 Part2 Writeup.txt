IT383 Project 2 Part2 writeup.
The purpose of this program was to find the median number from a group of numbers given in a file by using threads to break down the work.  This program reads a file, removes the # from the first line, puts the values into a vector, converts into an array, creates 4 threads, has each thread organize ¼ of the array, and finally merges the results.  For starting this program I built a merge sort method and made sure that it worked without threading.  Once I had done tests that the program works without threading, I implemented a thread function that would call the mergesort on a piece of the array based on the thread ID.  After I create the threads, I then call a join on each thread to make sure that the program waits until they complete before moving on.  I then do one last sort on the array to make sure the 4 pieces are sorted correctly.  Now that I have a sorted array, I print out the size of the array and the median value to the user.   The number of memory copies is limited, because I don’t create a new array for each thread.  Since the threads are ended with the join functions, I know that they are closed when my program completes.   Because each thread always does ~ ¼ of the work, they should all take a similar amount of time to complete as well.  An issue that stumped me for a while on this program was using the -pthread modifier on my makefile.  Sometimes it’s easy to forget simple things like that.  
